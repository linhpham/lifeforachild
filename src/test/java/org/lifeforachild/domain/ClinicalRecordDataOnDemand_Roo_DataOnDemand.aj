// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.lifeforachild.domain;

import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.lifeforachild.domain.Child;
import org.lifeforachild.domain.ChildDataOnDemand;
import org.lifeforachild.domain.ClinicalRecord;
import org.lifeforachild.domain.User;
import org.lifeforachild.domain.UserDataOnDemand;
import org.lifeforachild.enums.CreatineUnitsType;
import org.lifeforachild.enums.DiabetesCopingType;
import org.lifeforachild.enums.HbA1cMethodType;
import org.lifeforachild.enums.MG_OR_MMOL_Type;
import org.lifeforachild.enums.MicroalbuminuriaUnitsType;
import org.lifeforachild.enums.NotAttendingSchoolReasonType;
import org.lifeforachild.enums.ResearchConsentType;
import org.lifeforachild.enums.WhoAdjustsInsulinType;
import org.lifeforachild.enums.YesNoLaterType;
import org.lifeforachild.enums.YesNoType;
import org.lifeforachild.enums.YesNoUnkownType;
import org.lifeforachild.util.TestUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ClinicalRecordDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClinicalRecordDataOnDemand: @Component;
    
    private Random ClinicalRecordDataOnDemand.rnd = new SecureRandom();
    
    private List<ClinicalRecord> ClinicalRecordDataOnDemand.data;
    
    @Autowired
    private ChildDataOnDemand ClinicalRecordDataOnDemand.childDataOnDemand;
    
    @Autowired
    private UserDataOnDemand ClinicalRecordDataOnDemand.userDataOnDemand;
    
    public ClinicalRecord ClinicalRecordDataOnDemand.getNewTransientClinicalRecord(int index) {
        ClinicalRecord obj = new ClinicalRecord();
        setAcearb(obj, index);
        setAdditionalComment(obj, index);
        setAdjustInsulinDoseIfNeeded(obj, index);
        setAnalog(obj, index);
        setAppropriateGradeForAge(obj, index);
        setAttendingSchool(obj, index);
        setBPInLast12Months(obj, index);
        setBloodGlucoseSelfMonitoringPerWeek(obj, index);
        setBloodPressureDiastolicMMHg(obj, index);
        setBloodPressureDiastolicSD(obj, index);
        setBloodPressureSystolicMMHg(obj, index);
        setBloodPressureSystolicSD(obj, index);
        setBmi(obj, index);
        setBmiSD(obj, index);
        setBpMedications(obj, index);
        setBpMedicationsOther(obj, index);
        setCateract(obj, index);
        setChild(obj, index);
        setCholesterolUnits(obj, index);
        setConsentGiven(obj, index);
        setCreatinineInLast12Months(obj, index);
        setCreatinineUnits(obj, index);
        setCreatinineValue(obj, index);
        setDateCompleted(obj, index);
        setDateOfMeasurement(obj, index);
        setDiabetesCopingAbilities(obj, index);
        setDiabetesLimitingAttendance(obj, index);
        setExactAge(obj, index);
        setExactAgeMonths(obj, index);
        setEyesComment(obj, index);
        setEyesExaminedInLastYear(obj, index);
        setFasted(obj, index);
        setFeetComment(obj, index);
        setFeetExaminedInLastYear(obj, index);
        setHasPersistentHypertension(obj, index);
        setHasPubertyTannerB2_P2orGreater(obj, index);
        setHbA1cMethod(obj, index);
        setHbA1cMethodOther(obj, index);
        setHbA1cPercentage(obj, index);
        setHdlCholesterolInLast12Months(obj, index);
        setHdlCholesterolValue(obj, index);
        setHdlUnits(obj, index);
        setHeightCM(obj, index);
        setHeightInLast12Months(obj, index);
        setHeightSD(obj, index);
        setIfMenarcheAge(obj, index);
        setInsulinPerKg(obj, index);
        setInsulinUnitsPerDay(obj, index);
        setIsDeleted(obj, index);
        setLaserRxInLast12Months(obj, index);
        setLastHbA1cInLast12Months(obj, index);
        setLiterate(obj, index);
        setLongActingHuman(obj, index);
        setMenarche(obj, index);
        setMicroalbuminuriaInLast12Months(obj, index);
        setMicroalbuminuriaUnitOfMeasure(obj, index);
        setMicroalbuminuriaValue(obj, index);
        setMonofilamentAbnormal(obj, index);
        setMonofilamentTested(obj, index);
        setNotAttendingSchoolWhy(obj, index);
        setNumberKetoacidosisEpisodes(obj, index);
        setNumberOfHospitalAdmissionsRelatedToDiabetes(obj, index);
        setNumberOfInsulinInjectionsPerDay(obj, index);
        setNumberOfSevereHypoglycaemiaEpisodes(obj, index);
        setOralAgents(obj, index);
        setOralAgentsDescription(obj, index);
        setOtherTreatments(obj, index);
        setPersonCompletingForm(obj, index);
        setProteinuria_dipstick_other(obj, index);
        setRoutineClinicReviewsLastYear(obj, index);
        setSeniorPhysician(obj, index);
        setShortActingHuman(obj, index);
        setTotalCholesterolInLast12Months(obj, index);
        setTotalCholesterolValue(obj, index);
        setTriglyceridesInLast12Months(obj, index);
        setTriglyceridesUnits(obj, index);
        setTriglyceridesValue(obj, index);
        setTuningForkAbnormal(obj, index);
        setTuningForkTested(obj, index);
        setUrineGlucoseSelfMonitoringPerWeek(obj, index);
        setVisualAcuityLeft(obj, index);
        setVisualAcuityRight(obj, index);
        setWeightInLast12Months(obj, index);
        setWeightKG(obj, index);
        setWeightSD(obj, index);
        return obj;
    }
    
    public void ClinicalRecordDataOnDemand.setAcearb(ClinicalRecord obj, int index) {
        YesNoType acearb = null;
        obj.setAcearb(acearb);
    }
    
    public void ClinicalRecordDataOnDemand.setAdditionalComment(ClinicalRecord obj, int index) {
        String additionalComment = "additionalComment_" + index;
        if (additionalComment.length() > 100) {
            additionalComment = additionalComment.substring(0, 100);
        }
        obj.setAdditionalComment(additionalComment);
    }
    
    public void ClinicalRecordDataOnDemand.setAdjustInsulinDoseIfNeeded(ClinicalRecord obj, int index) {
        WhoAdjustsInsulinType adjustInsulinDoseIfNeeded = WhoAdjustsInsulinType.class.getEnumConstants()[0];
        obj.setAdjustInsulinDoseIfNeeded(adjustInsulinDoseIfNeeded);
    }
    
    public void ClinicalRecordDataOnDemand.setAnalog(ClinicalRecord obj, int index) {
        YesNoType analog = YesNoType.class.getEnumConstants()[0];
        obj.setAnalog(analog);
    }
    
    public void ClinicalRecordDataOnDemand.setAppropriateGradeForAge(ClinicalRecord obj, int index) {
        YesNoType appropriateGradeForAge = null;
        obj.setAppropriateGradeForAge(appropriateGradeForAge);
    }
    
    public void ClinicalRecordDataOnDemand.setAttendingSchool(ClinicalRecord obj, int index) {
        YesNoType attendingSchool = YesNoType.class.getEnumConstants()[0];
        obj.setAttendingSchool(attendingSchool);
    }
    
    public void ClinicalRecordDataOnDemand.setBPInLast12Months(ClinicalRecord obj, int index) {
        YesNoType BPInLast12Months = YesNoType.class.getEnumConstants()[0];
        obj.setBPInLast12Months(BPInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setBloodGlucoseSelfMonitoringPerWeek(ClinicalRecord obj, int index) {
        Integer bloodGlucoseSelfMonitoringPerWeek = new Integer(index);
        if (bloodGlucoseSelfMonitoringPerWeek < 0 || bloodGlucoseSelfMonitoringPerWeek > 70) {
            bloodGlucoseSelfMonitoringPerWeek = 70;
        }
        obj.setBloodGlucoseSelfMonitoringPerWeek(bloodGlucoseSelfMonitoringPerWeek);
    }
    
    public void ClinicalRecordDataOnDemand.setBloodPressureDiastolicMMHg(ClinicalRecord obj, int index) {
        Integer bloodPressureDiastolicMMHg = new Integer(index);
        if (bloodPressureDiastolicMMHg < 20 || bloodPressureDiastolicMMHg > 130) {
            bloodPressureDiastolicMMHg = 130;
        }
        obj.setBloodPressureDiastolicMMHg(bloodPressureDiastolicMMHg);
    }
    
    public void ClinicalRecordDataOnDemand.setBloodPressureDiastolicSD(ClinicalRecord obj, int index) {
        Float BloodPressureDiastolicSD = null;
        obj.setBloodPressureDiastolicSD(BloodPressureDiastolicSD);
    }
    
    public void ClinicalRecordDataOnDemand.setBloodPressureSystolicMMHg(ClinicalRecord obj, int index) {
        Integer bloodPressureSystolicMMHg = new Integer(index);
        if (bloodPressureSystolicMMHg < 40 || bloodPressureSystolicMMHg > 220) {
            bloodPressureSystolicMMHg = 220;
        }
        obj.setBloodPressureSystolicMMHg(bloodPressureSystolicMMHg);
    }
    
    public void ClinicalRecordDataOnDemand.setBloodPressureSystolicSD(ClinicalRecord obj, int index) {
        Float BloodPressureSystolicSD = null;
        obj.setBloodPressureSystolicSD(BloodPressureSystolicSD);
    }
    
    public void ClinicalRecordDataOnDemand.setBmi(ClinicalRecord obj, int index) {
        Float bmi = null;
        obj.setBmi(bmi);
    }
    
    public void ClinicalRecordDataOnDemand.setBmiSD(ClinicalRecord obj, int index) {
        Float bmiSD = null;
        obj.setBmiSD(bmiSD);
    }
    
    public void ClinicalRecordDataOnDemand.setBpMedications(ClinicalRecord obj, int index) {
        YesNoType bpMedications = YesNoType.class.getEnumConstants()[0];
        obj.setBpMedications(bpMedications);
    }
    
    public void ClinicalRecordDataOnDemand.setBpMedicationsOther(ClinicalRecord obj, int index) {
        String bpMedicationsOther = "bpMedicationsOther_" + index;
        if (bpMedicationsOther.length() > 30) {
            bpMedicationsOther = bpMedicationsOther.substring(0, 30);
        }
        obj.setBpMedicationsOther(bpMedicationsOther);
    }
    
    public void ClinicalRecordDataOnDemand.setCateract(ClinicalRecord obj, int index) {
        YesNoUnkownType cateract = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setCateract(cateract);
    }
    
    public void ClinicalRecordDataOnDemand.setChild(ClinicalRecord obj, int index) {
        Child child = childDataOnDemand.getRandomChild();
        obj.setChild(child);
    }
    
    public void ClinicalRecordDataOnDemand.setCholesterolUnits(ClinicalRecord obj, int index) {
        MG_OR_MMOL_Type cholesterolUnits = MG_OR_MMOL_Type.class.getEnumConstants()[0];
        obj.setCholesterolUnits(cholesterolUnits);
    }
    
    public void ClinicalRecordDataOnDemand.setConsentGiven(ClinicalRecord obj, int index) {
        ResearchConsentType consentGiven = ResearchConsentType.class.getEnumConstants()[0];
        obj.setConsentGiven(consentGiven);
    }
    
    public void ClinicalRecordDataOnDemand.setCreatinineInLast12Months(ClinicalRecord obj, int index) {
        YesNoLaterType creatinineInLast12Months = YesNoLaterType.class.getEnumConstants()[0];
        obj.setCreatinineInLast12Months(creatinineInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setCreatinineUnits(ClinicalRecord obj, int index) {
        CreatineUnitsType creatinineUnits = CreatineUnitsType.class.getEnumConstants()[0];
        obj.setCreatinineUnits(creatinineUnits);
    }
    
    public void ClinicalRecordDataOnDemand.setCreatinineValue(ClinicalRecord obj, int index) {
        Float creatinineValue = new Integer(index).floatValue();
        obj.setCreatinineValue(creatinineValue);
    }
    
    public void ClinicalRecordDataOnDemand.setDateCompleted(ClinicalRecord obj, int index) {
        Date dateCompleted = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCompleted(dateCompleted);
    }
    
    public void ClinicalRecordDataOnDemand.setDateOfMeasurement(ClinicalRecord obj, int index) {
        Date dateOfMeasurement = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfMeasurement(dateOfMeasurement);
    }
    
    public void ClinicalRecordDataOnDemand.setDiabetesCopingAbilities(ClinicalRecord obj, int index) {
        DiabetesCopingType diabetesCopingAbilities = DiabetesCopingType.class.getEnumConstants()[0];
        obj.setDiabetesCopingAbilities(diabetesCopingAbilities);
    }
    
    public void ClinicalRecordDataOnDemand.setDiabetesLimitingAttendance(ClinicalRecord obj, int index) {
        YesNoType diabetesLimitingAttendance = null;
        obj.setDiabetesLimitingAttendance(diabetesLimitingAttendance);
    }
    
    public void ClinicalRecordDataOnDemand.setExactAge(ClinicalRecord obj, int index) {
        Float exactAge = null;
        obj.setExactAge(exactAge);
    }
    
    public void ClinicalRecordDataOnDemand.setExactAgeMonths(ClinicalRecord obj, int index) {
        Float exactAgeMonths = null;
        obj.setExactAgeMonths(exactAgeMonths);
    }
    
    public void ClinicalRecordDataOnDemand.setEyesComment(ClinicalRecord obj, int index) {
        String eyesComment = "eyesComment_" + index;
        if (eyesComment.length() > 100) {
            eyesComment = eyesComment.substring(0, 100);
        }
        obj.setEyesComment(eyesComment);
    }
    
    public void ClinicalRecordDataOnDemand.setEyesExaminedInLastYear(ClinicalRecord obj, int index) {
        YesNoUnkownType eyesExaminedInLastYear = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setEyesExaminedInLastYear(eyesExaminedInLastYear);
    }
    
    public void ClinicalRecordDataOnDemand.setFasted(ClinicalRecord obj, int index) {
        YesNoUnkownType fasted = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setFasted(fasted);
    }
    
    public void ClinicalRecordDataOnDemand.setFeetComment(ClinicalRecord obj, int index) {
        String feetComment = "feetComment_" + index;
        if (feetComment.length() > 100) {
            feetComment = feetComment.substring(0, 100);
        }
        obj.setFeetComment(feetComment);
    }
    
    public void ClinicalRecordDataOnDemand.setFeetExaminedInLastYear(ClinicalRecord obj, int index) {
        YesNoUnkownType feetExaminedInLastYear = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setFeetExaminedInLastYear(feetExaminedInLastYear);
    }
    
    public void ClinicalRecordDataOnDemand.setHasPersistentHypertension(ClinicalRecord obj, int index) {
        YesNoUnkownType hasPersistentHypertension = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setHasPersistentHypertension(hasPersistentHypertension);
    }
    
    public void ClinicalRecordDataOnDemand.setHasPubertyTannerB2_P2orGreater(ClinicalRecord obj, int index) {
        YesNoUnkownType hasPubertyTannerB2_P2orGreater = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setHasPubertyTannerB2_P2orGreater(hasPubertyTannerB2_P2orGreater);
    }
    
    public void ClinicalRecordDataOnDemand.setHbA1cMethod(ClinicalRecord obj, int index) {
        HbA1cMethodType hbA1cMethod = HbA1cMethodType.class.getEnumConstants()[0];
        obj.setHbA1cMethod(hbA1cMethod);
    }
    
    public void ClinicalRecordDataOnDemand.setHbA1cMethodOther(ClinicalRecord obj, int index) {
        String hbA1cMethodOther = "hbA1cMethodOther_" + index;
        if (hbA1cMethodOther.length() > 30) {
            hbA1cMethodOther = hbA1cMethodOther.substring(0, 30);
        }
        obj.setHbA1cMethodOther(hbA1cMethodOther);
    }
    
    public void ClinicalRecordDataOnDemand.setHbA1cPercentage(ClinicalRecord obj, int index) {
        Float hbA1cPercentage = new Integer(index).floatValue();
        if (hbA1cPercentage < 2.0F || hbA1cPercentage > 20.0F) {
            hbA1cPercentage = 20.0F;
        }
        obj.setHbA1cPercentage(hbA1cPercentage);
    }
    
    public void ClinicalRecordDataOnDemand.setHdlCholesterolInLast12Months(ClinicalRecord obj, int index) {
        YesNoLaterType hdlCholesterolInLast12Months = YesNoLaterType.class.getEnumConstants()[0];
        obj.setHdlCholesterolInLast12Months(hdlCholesterolInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setHdlCholesterolValue(ClinicalRecord obj, int index) {
        Float hdlCholesterolValue = new Integer(index).floatValue();
        obj.setHdlCholesterolValue(hdlCholesterolValue);
    }
    
    public void ClinicalRecordDataOnDemand.setHdlUnits(ClinicalRecord obj, int index) {
        MG_OR_MMOL_Type hdlUnits = MG_OR_MMOL_Type.class.getEnumConstants()[0];
        obj.setHdlUnits(hdlUnits);
    }
    
    public void ClinicalRecordDataOnDemand.setHeightCM(ClinicalRecord obj, int index) {
        Float heightCM = new Integer(index).floatValue();
        if (heightCM < 50.0F || heightCM > 220.0F) {
            heightCM = 220.0F;
        }
        obj.setHeightCM(heightCM);
    }
    
    public void ClinicalRecordDataOnDemand.setHeightInLast12Months(ClinicalRecord obj, int index) {
        YesNoType heightInLast12Months = YesNoType.class.getEnumConstants()[0];
        obj.setHeightInLast12Months(heightInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setHeightSD(ClinicalRecord obj, int index) {
        Float heightSD = null;
        obj.setHeightSD(heightSD);
    }
    
    public void ClinicalRecordDataOnDemand.setIfMenarcheAge(ClinicalRecord obj, int index) {
        String ifMenarcheAge = "ifMenarcheAge_" + index;
        obj.setIfMenarcheAge(ifMenarcheAge);
    }
    
    public void ClinicalRecordDataOnDemand.setInsulinPerKg(ClinicalRecord obj, int index) {
        Float insulinPerKg = null;
        obj.setInsulinPerKg(insulinPerKg);
    }
    
    public void ClinicalRecordDataOnDemand.setInsulinUnitsPerDay(ClinicalRecord obj, int index) {
        Integer insulinUnitsPerDay = new Integer(index);
        if (insulinUnitsPerDay < 0 || insulinUnitsPerDay > 200) {
            insulinUnitsPerDay = 200;
        }
        obj.setInsulinUnitsPerDay(insulinUnitsPerDay);
    }
    
    public void ClinicalRecordDataOnDemand.setIsDeleted(ClinicalRecord obj, int index) {
        Boolean isDeleted = Boolean.TRUE;
        obj.setIsDeleted(isDeleted);
    }
    
    public void ClinicalRecordDataOnDemand.setLaserRxInLast12Months(ClinicalRecord obj, int index) {
        YesNoUnkownType LaserRxInLast12Months = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setLaserRxInLast12Months(LaserRxInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setLastHbA1cInLast12Months(ClinicalRecord obj, int index) {
        YesNoLaterType lastHbA1cInLast12Months = YesNoLaterType.class.getEnumConstants()[0];
        obj.setLastHbA1cInLast12Months(lastHbA1cInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setLiterate(ClinicalRecord obj, int index) {
        YesNoType literate = YesNoType.class.getEnumConstants()[0];
        obj.setLiterate(literate);
    }
    
    public void ClinicalRecordDataOnDemand.setLongActingHuman(ClinicalRecord obj, int index) {
        YesNoType longActingHuman = YesNoType.class.getEnumConstants()[0];
        obj.setLongActingHuman(longActingHuman);
    }
    
    public void ClinicalRecordDataOnDemand.setMenarche(ClinicalRecord obj, int index) {
        YesNoUnkownType menarche = YesNoUnkownType.class.getEnumConstants()[0];
        obj.setMenarche(menarche);
    }
    
    public void ClinicalRecordDataOnDemand.setMicroalbuminuriaInLast12Months(ClinicalRecord obj, int index) {
        YesNoLaterType microalbuminuriaInLast12Months = YesNoLaterType.class.getEnumConstants()[0];
        obj.setMicroalbuminuriaInLast12Months(microalbuminuriaInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setMicroalbuminuriaUnitOfMeasure(ClinicalRecord obj, int index) {
        MicroalbuminuriaUnitsType microalbuminuriaUnitOfMeasure = null;
        obj.setMicroalbuminuriaUnitOfMeasure(microalbuminuriaUnitOfMeasure);
    }
    
    public void ClinicalRecordDataOnDemand.setMicroalbuminuriaValue(ClinicalRecord obj, int index) {
        String microalbuminuriaValue = "microalbuminuriaValue_" + index;
        obj.setMicroalbuminuriaValue(microalbuminuriaValue);
    }
    
    public void ClinicalRecordDataOnDemand.setMonofilamentAbnormal(ClinicalRecord obj, int index) {
        YesNoType monofilamentAbnormal = YesNoType.class.getEnumConstants()[0];
        obj.setMonofilamentAbnormal(monofilamentAbnormal);
    }
    
    public void ClinicalRecordDataOnDemand.setMonofilamentTested(ClinicalRecord obj, int index) {
        YesNoType monofilamentTested = YesNoType.class.getEnumConstants()[0];
        obj.setMonofilamentTested(monofilamentTested);
    }
    
    public void ClinicalRecordDataOnDemand.setNotAttendingSchoolWhy(ClinicalRecord obj, int index) {
        NotAttendingSchoolReasonType notAttendingSchoolWhy = NotAttendingSchoolReasonType.class.getEnumConstants()[0];
        obj.setNotAttendingSchoolWhy(notAttendingSchoolWhy);
    }
    
    public void ClinicalRecordDataOnDemand.setNumberKetoacidosisEpisodes(ClinicalRecord obj, int index) {
        Integer numberKetoacidosisEpisodes = new Integer(index);
        if (numberKetoacidosisEpisodes < 0 || numberKetoacidosisEpisodes > 12) {
            numberKetoacidosisEpisodes = 12;
        }
        obj.setNumberKetoacidosisEpisodes(numberKetoacidosisEpisodes);
    }
    
    public void ClinicalRecordDataOnDemand.setNumberOfHospitalAdmissionsRelatedToDiabetes(ClinicalRecord obj, int index) {
        Integer numberOfHospitalAdmissionsRelatedToDiabetes = new Integer(index);
        if (numberOfHospitalAdmissionsRelatedToDiabetes < 0 || numberOfHospitalAdmissionsRelatedToDiabetes > 15) {
            numberOfHospitalAdmissionsRelatedToDiabetes = 15;
        }
        obj.setNumberOfHospitalAdmissionsRelatedToDiabetes(numberOfHospitalAdmissionsRelatedToDiabetes);
    }
    
    public void ClinicalRecordDataOnDemand.setNumberOfInsulinInjectionsPerDay(ClinicalRecord obj, int index) {
        Integer numberOfInsulinInjectionsPerDay = new Integer(index);
        if (numberOfInsulinInjectionsPerDay < 0 || numberOfInsulinInjectionsPerDay > 9) {
            numberOfInsulinInjectionsPerDay = 9;
        }
        obj.setNumberOfInsulinInjectionsPerDay(numberOfInsulinInjectionsPerDay);
    }
    
    public void ClinicalRecordDataOnDemand.setNumberOfSevereHypoglycaemiaEpisodes(ClinicalRecord obj, int index) {
        Integer numberOfSevereHypoglycaemiaEpisodes = new Integer(index);
        if (numberOfSevereHypoglycaemiaEpisodes < 0 || numberOfSevereHypoglycaemiaEpisodes > 20) {
            numberOfSevereHypoglycaemiaEpisodes = 20;
        }
        obj.setNumberOfSevereHypoglycaemiaEpisodes(numberOfSevereHypoglycaemiaEpisodes);
    }
    
    public void ClinicalRecordDataOnDemand.setOralAgents(ClinicalRecord obj, int index) {
        YesNoType oralAgents = YesNoType.class.getEnumConstants()[0];
        obj.setOralAgents(oralAgents);
    }
    
    public void ClinicalRecordDataOnDemand.setOralAgentsDescription(ClinicalRecord obj, int index) {
        String oralAgentsDescription = "oralAgentsDescription_" + index;
        if (oralAgentsDescription.length() > 40) {
            oralAgentsDescription = oralAgentsDescription.substring(0, 40);
        }
        obj.setOralAgentsDescription(oralAgentsDescription);
    }
    
    public void ClinicalRecordDataOnDemand.setOtherTreatments(ClinicalRecord obj, int index) {
        String otherTreatments = "otherTreatments_" + index;
        if (otherTreatments.length() > 50) {
            otherTreatments = otherTreatments.substring(0, 50);
        }
        obj.setOtherTreatments(otherTreatments);
    }
    
    public void ClinicalRecordDataOnDemand.setPersonCompletingForm(ClinicalRecord obj, int index) {
        User personCompletingForm = userDataOnDemand.getRandomUser();
        obj.setPersonCompletingForm(personCompletingForm);
    }
    
    public void ClinicalRecordDataOnDemand.setProteinuria_dipstick_other(ClinicalRecord obj, int index) {
        String Proteinuria_dipstick_other = "Proteinuria_dipstick_other_" + index;
        obj.setProteinuria_dipstick_other(Proteinuria_dipstick_other);
    }
    
    public void ClinicalRecordDataOnDemand.setRoutineClinicReviewsLastYear(ClinicalRecord obj, int index) {
        Integer routineClinicReviewsLastYear = new Integer(index);
        if (routineClinicReviewsLastYear < 0 || routineClinicReviewsLastYear > 50) {
            routineClinicReviewsLastYear = 50;
        }
        obj.setRoutineClinicReviewsLastYear(routineClinicReviewsLastYear);
    }
    
    public void ClinicalRecordDataOnDemand.setSeniorPhysician(ClinicalRecord obj, int index) {
        String seniorPhysician = "seniorPhysician_" + index;
        if (seniorPhysician.length() > 30) {
            seniorPhysician = seniorPhysician.substring(0, 30);
        }
        obj.setSeniorPhysician(seniorPhysician);
    }
    
    public void ClinicalRecordDataOnDemand.setShortActingHuman(ClinicalRecord obj, int index) {
        YesNoType shortActingHuman = YesNoType.class.getEnumConstants()[0];
        obj.setShortActingHuman(shortActingHuman);
    }
    
    public void ClinicalRecordDataOnDemand.setTotalCholesterolInLast12Months(ClinicalRecord obj, int index) {
        YesNoLaterType totalCholesterolInLast12Months = YesNoLaterType.class.getEnumConstants()[0];
        obj.setTotalCholesterolInLast12Months(totalCholesterolInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setTotalCholesterolValue(ClinicalRecord obj, int index) {
        Float totalCholesterolValue = new Integer(index).floatValue();
        obj.setTotalCholesterolValue(totalCholesterolValue);
    }
    
    public void ClinicalRecordDataOnDemand.setTriglyceridesInLast12Months(ClinicalRecord obj, int index) {
        YesNoLaterType triglyceridesInLast12Months = YesNoLaterType.class.getEnumConstants()[0];
        obj.setTriglyceridesInLast12Months(triglyceridesInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setTriglyceridesUnits(ClinicalRecord obj, int index) {
        MG_OR_MMOL_Type triglyceridesUnits = MG_OR_MMOL_Type.class.getEnumConstants()[0];
        obj.setTriglyceridesUnits(triglyceridesUnits);
    }
    
    public void ClinicalRecordDataOnDemand.setTriglyceridesValue(ClinicalRecord obj, int index) {
        Float triglyceridesValue = new Integer(index).floatValue();
        obj.setTriglyceridesValue(triglyceridesValue);
    }
    
    public void ClinicalRecordDataOnDemand.setTuningForkAbnormal(ClinicalRecord obj, int index) {
        YesNoType tuningForkAbnormal = YesNoType.class.getEnumConstants()[0];
        obj.setTuningForkAbnormal(tuningForkAbnormal);
    }
    
    public void ClinicalRecordDataOnDemand.setTuningForkTested(ClinicalRecord obj, int index) {
        YesNoType tuningForkTested = YesNoType.class.getEnumConstants()[0];
        obj.setTuningForkTested(tuningForkTested);
    }
    
    public void ClinicalRecordDataOnDemand.setUrineGlucoseSelfMonitoringPerWeek(ClinicalRecord obj, int index) {
        Integer urineGlucoseSelfMonitoringPerWeek = new Integer(index);
        if (urineGlucoseSelfMonitoringPerWeek < 0 || urineGlucoseSelfMonitoringPerWeek > 21) {
            urineGlucoseSelfMonitoringPerWeek = 21;
        }
        obj.setUrineGlucoseSelfMonitoringPerWeek(urineGlucoseSelfMonitoringPerWeek);
    }
    
    public void ClinicalRecordDataOnDemand.setVisualAcuityLeft(ClinicalRecord obj, int index) {
        String visualAcuityLeft = "visualAcuityLeft_" + index;
        if (visualAcuityLeft.length() > 20) {
            visualAcuityLeft = visualAcuityLeft.substring(0, 20);
        }
        obj.setVisualAcuityLeft(visualAcuityLeft);
    }
    
    public void ClinicalRecordDataOnDemand.setVisualAcuityRight(ClinicalRecord obj, int index) {
        String visualAcuityRight = "visualAcuityRight_" + index;
        if (visualAcuityRight.length() > 20) {
            visualAcuityRight = visualAcuityRight.substring(0, 20);
        }
        obj.setVisualAcuityRight(visualAcuityRight);
    }
    
    public void ClinicalRecordDataOnDemand.setWeightInLast12Months(ClinicalRecord obj, int index) {
        YesNoType weightInLast12Months = YesNoType.class.getEnumConstants()[0];
        obj.setWeightInLast12Months(weightInLast12Months);
    }
    
    public void ClinicalRecordDataOnDemand.setWeightKG(ClinicalRecord obj, int index) {
        Float weightKG = new Integer(index).floatValue();
        if (weightKG < 3.0F || weightKG > 120.0F) {
            weightKG = 120.0F;
        }
        obj.setWeightKG(weightKG);
    }
    
    public void ClinicalRecordDataOnDemand.setWeightSD(ClinicalRecord obj, int index) {
        Float weightSD = null;
        obj.setWeightSD(weightSD);
    }
    
    public ClinicalRecord ClinicalRecordDataOnDemand.getSpecificClinicalRecord(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ClinicalRecord obj = data.get(index);
        return ClinicalRecord.findClinicalRecord(obj.getId());
    }
    
    public ClinicalRecord ClinicalRecordDataOnDemand.getRandomClinicalRecord() {
        init();
        ClinicalRecord obj = data.get(rnd.nextInt(data.size()));
        return ClinicalRecord.findClinicalRecord(obj.getId());
    }
    
    public boolean ClinicalRecordDataOnDemand.modifyClinicalRecord(ClinicalRecord obj) {
        return false;
    }
    
    public void ClinicalRecordDataOnDemand.init() {
    	TestUtil.createAndSetTestUser();
        data = ClinicalRecord.findClinicalRecordEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ClinicalRecord' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.lifeforachild.domain.ClinicalRecord>();
        for (int i = 0; i < 10; i++) {
            ClinicalRecord obj = getNewTransientClinicalRecord(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
