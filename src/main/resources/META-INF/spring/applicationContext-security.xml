<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

    <http auto-config="true" use-expressions="true">
    	<form-login default-target-url="/search" login-processing-url="/static/j_spring_security_check" login-page="/login" authentication-failure-url="/login?login_error=t"/>
        <logout logout-url="/static/j_spring_security_logout"/>
        <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/child/**" access="isAuthenticated()"/>
        <intercept-url pattern="/user/**" access="isAuthenticated()"/>
        <intercept-url pattern="/usergroup/**" access="isAuthenticated()"/>    
        <intercept-url pattern="/search/**" access="isAuthenticated()"/>             
        <intercept-url pattern="/member/**" access="isAuthenticated()" />
        <intercept-url pattern="/clinicalrecord/**" access="isAuthenticated()"/>        
        <intercept-url pattern="/country/**" access="isAuthenticated()"/>
        <intercept-url pattern="/diabetescentre/**" access="isAuthenticated()"/>
        <intercept-url pattern="/permissions/**" access="isAuthenticated()"/>
        <intercept-url pattern="/report/**" access="isAuthenticated()"/>
        <intercept-url pattern="/resources/**" access="permitAll" />
        <intercept-url pattern="/static/**" access="permitAll" />
        <intercept-url pattern="/**" access="permitAll" />                
    </http>

    <authentication-manager alias="authenticationManager">
    	<!-- SHA-256 values can be produced using 'echo -n your_desired_password | sha256sum' (using normal *nix environments) -->
    	<authentication-provider><!--
    	all tables 
    	authorities-by-username-query="select u.username, p.name from user u inner join user_group_member gm on (gm.user = u.id) inner join user_group g on (g.id = gm.user_group) inner join user_group_permission gp on (gp.user_group = gm.user_group) inner join permissions p on (p.id = gp.permission) where u.username=?"
   		group-authorities-by-username-query="SELECT u.username, g.group_name, p.name from user u inner join user_group_member gm on (gm.user = u.id) inner join user_group g on (g.id = gm.user_group) inner join user_group_permission gp on (gp.user_group = gm.user_group) inner join permissions p on (p.id = gp.permission) where u.username=?"
   		
   		middle no tables
	    authorities-by-username-query="select u.username, p.name from user u inner join user_group g on (g.id = u.user_group) inner join user_group_permission gp on (gp.user_group = u.user_group) inner join permissions p on (p.id = gp.permission) where u.username=?"
   		group-authorities-by-username-query="SELECT u.username, g.group_name, p.name from user u inner join user_group g on (g.id = u.user_group) inner join user_group_permission gp on (gp.user_group = u.user_group) inner join permissions p on (p.id = gp.permission) where u.username=?"	       		   		   	
	     	--><jdbc-user-service data-source-ref="dataSource"
	     		group-authorities-by-username-query="SELECT u.username, g.group_name, p.name from user u inner join user_group g on (g.id = u.user_group) inner join user_group_permissions gp on (gp.user_group = u.user_group) inner join permissions p on (p.id = gp.permissions) where u.username=?"
	     		users-by-username-query="select username,password,enabled from User where username = ?"
	     		authorities-by-username-query="select u.username, p.name from user u inner join user_group g on (g.id = u.user_group) inner join user_group_permissions gp on (gp.user_group = u.user_group) inner join permissions p on (p.id = gp.permissions) where u.username=?"	     		
	     		/>
		</authentication-provider>
	</authentication-manager>
               
	<beans:bean id="userDetailsManager" class="org.springframework.security.provisioning.JdbcUserDetailsManager">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="authenticationManager" ref="authenticationManager"/>   
              
		<!-- enable lookup of permissions via user's group -->
		<beans:property name="enableGroups" value="true"/>
		
		
		<!-- disable direct lookup of user's permissions (require lookup via group) -->
		<beans:property name="enableAuthorities" value="false"/>                    
	</beans:bean>
               
<!--     <beans:bean id="permissions" class="org.lifeforachild.domain.Permissions">
    	<beans:property name="name" value="ACCESS_ADMIN"/>
    </beans:bean>
    
    <beans:bean id="userGroup" class="org.lifeforachild.domain.UserGroup">
    	<beans:property name="groupName" value="administrator"/>
    	<beans:property name="permissions">
    		<beans:list>
    			<beans:ref bean="permissions"/>
    		</beans:list>
   		</beans:property>    	
    </beans:bean>
    
    <beans:bean id="adminUser" class="org.lifeforachild.domain.User">
            <beans:property name="username" value="admin" />
            <beans:property name="password" value="admin" />                
            <beans:property name="enabled" value="true" />
            <beans:property name="userGroup" ref="userGroup"/>
    </beans:bean> -->

</beans:beans>