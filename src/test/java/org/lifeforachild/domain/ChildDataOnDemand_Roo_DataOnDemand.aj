// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.lifeforachild.domain;

import java.lang.Boolean;
import java.lang.Float;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.lifeforachild.Util.SecurityUtil;
import org.lifeforachild.domain.Child;
import org.lifeforachild.domain.Country;
import org.lifeforachild.domain.DiabetesCentre;
import org.lifeforachild.enums.CauseOfDeathType;
import org.lifeforachild.enums.DiabetesType;
import org.lifeforachild.enums.DistanceType;
import org.lifeforachild.enums.SexType;
import org.lifeforachild.enums.SurvivalStatusType;
import org.lifeforachild.util.TestUtil;
import org.springframework.stereotype.Component;

privileged aspect ChildDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ChildDataOnDemand: @Component;
    
    private Random ChildDataOnDemand.rnd = new SecureRandom();
    
    private List<Child> ChildDataOnDemand.data;
    
    public Child ChildDataOnDemand.getNewTransientChild(int index) {
        Child obj = new Child();
        setAgeAtDiagnosis(obj, index);
        setCauseOfDeath(obj, index);
        setCauseOfDeathOther(obj, index);
        setCentre(obj, index);
        setCountry(obj, index);
        setCreatedOn(obj, index);
        setDateOfBirth(obj, index);
        setDateOfDeath(obj, index);
        setDateOfRegistration(obj, index);
        setDiabetesDiagnosed(obj, index);
        setDiabetesType(obj, index);
        setDiabetesTypeOther(obj, index);
        setDistanceLivesFromCentre(obj, index);
        setEthnicGroup(obj, index);
        setIndividualId(obj, index);
        setInitials(obj, index);
        setInsulinSince(obj, index);
        setIsDeleted(obj, index);
        setLastName(obj, index);
        setLocalMedicalNumber(obj, index);
        setName(obj, index);
        setSex(obj, index);
        setSurvivalStatus(obj, index);
        setUpdatedOn(obj, index);
        return obj;
    }
    
    public void ChildDataOnDemand.setAgeAtDiagnosis(Child obj, int index) {
        Float ageAtDiagnosis = new Integer(index).floatValue();
        obj.setAgeAtDiagnosis(ageAtDiagnosis);
    }
    
    public void ChildDataOnDemand.setCauseOfDeath(Child obj, int index) {
        CauseOfDeathType causeOfDeath = CauseOfDeathType.class.getEnumConstants()[0];
        obj.setCauseOfDeath(causeOfDeath);
    }
    
    public void ChildDataOnDemand.setCauseOfDeathOther(Child obj, int index) {
        String causeOfDeathOther = "causeOfDeathOther_" + index;
        obj.setCauseOfDeathOther(causeOfDeathOther);
    }
    
    public void ChildDataOnDemand.setCentre(Child obj, int index) {
        DiabetesCentre centre = null;
        obj.setCentre(centre);
    }
    
    public void ChildDataOnDemand.setCountry(Child obj, int index) {
        Country country = null;
        obj.setCountry(country);
    }
    
    public void ChildDataOnDemand.setCreatedOn(Child obj, int index) {
        Date createdOn = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedOn(createdOn);
    }
    
    public void ChildDataOnDemand.setDateOfBirth(Child obj, int index) {
        Date dateOfBirth = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfBirth(dateOfBirth);
    }
    
    public void ChildDataOnDemand.setDateOfDeath(Child obj, int index) {
        Date dateOfDeath = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfDeath(dateOfDeath);
    }
    
    public void ChildDataOnDemand.setDateOfRegistration(Child obj, int index) {
        Date dateOfRegistration = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfRegistration(dateOfRegistration);
    }
    
    public void ChildDataOnDemand.setDiabetesDiagnosed(Child obj, int index) {
        Date diabetesDiagnosed = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDiabetesDiagnosed(diabetesDiagnosed);
    }
    
    public void ChildDataOnDemand.setDiabetesType(Child obj, int index) {
        DiabetesType diabetesType = DiabetesType.class.getEnumConstants()[0];
        obj.setDiabetesType(diabetesType);
    }
    
    public void ChildDataOnDemand.setDiabetesTypeOther(Child obj, int index) {
        String diabetesTypeOther = "diabetesTypeOther_" + index;
        obj.setDiabetesTypeOther(diabetesTypeOther);
    }
    
    public void ChildDataOnDemand.setDistanceLivesFromCentre(Child obj, int index) {
        DistanceType distanceLivesFromCentre = DistanceType.class.getEnumConstants()[0];
        obj.setDistanceLivesFromCentre(distanceLivesFromCentre);
    }
    
    public void ChildDataOnDemand.setEthnicGroup(Child obj, int index) {
        String ethnicGroup = "ethnicGroup_" + index;
        obj.setEthnicGroup(ethnicGroup);
    }
    
    public void ChildDataOnDemand.setIndividualId(Child obj, int index) {
        String individualId = "individualId_" + index;
        if (individualId.length() > 20) {
            individualId = individualId.substring(0, 20);
        }
        obj.setIndividualId(individualId);
    }
    
    public void ChildDataOnDemand.setInitials(Child obj, int index) {
        String initials = "initials_" + index;
        obj.setInitials(initials);
    }
    
    public void ChildDataOnDemand.setInsulinSince(Child obj, int index) {
        Date insulinSince = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setInsulinSince(insulinSince);
    }
    
    public void ChildDataOnDemand.setIsDeleted(Child obj, int index) {
        Boolean isDeleted = Boolean.TRUE;
        obj.setIsDeleted(isDeleted);
    }
    
    public void ChildDataOnDemand.setLastName(Child obj, int index) {
        String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public void ChildDataOnDemand.setLocalMedicalNumber(Child obj, int index) {
        String localMedicalNumber = "localMedicalNumber_" + index;
        obj.setLocalMedicalNumber(localMedicalNumber);
    }
    
    public void ChildDataOnDemand.setName(Child obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void ChildDataOnDemand.setSex(Child obj, int index) {
        SexType sex = SexType.class.getEnumConstants()[0];
        obj.setSex(sex);
    }
    
    public void ChildDataOnDemand.setSurvivalStatus(Child obj, int index) {
        SurvivalStatusType survivalStatus = SurvivalStatusType.class.getEnumConstants()[0];
        obj.setSurvivalStatus(survivalStatus);
    }
    
    public void ChildDataOnDemand.setUpdatedOn(Child obj, int index) {
        Date updatedOn = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedOn(updatedOn);
    }
    
    public Child ChildDataOnDemand.getSpecificChild(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Child obj = data.get(index);
        return Child.findChild(obj.getId());
    }
    
    public Child ChildDataOnDemand.getRandomChild() {
        init();
        Child obj = data.get(rnd.nextInt(data.size()));
        return Child.findChild(obj.getId());
    }
    
    public boolean ChildDataOnDemand.modifyChild(Child obj) {
        return false;
    }
    
    public void ChildDataOnDemand.init() {
    	TestUtil.createAndSetTestUser();
        data = Child.findChildEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Child' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.lifeforachild.domain.Child>();
        for (int i = 0; i < 10; i++) {
            Child obj = getNewTransientChild(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
